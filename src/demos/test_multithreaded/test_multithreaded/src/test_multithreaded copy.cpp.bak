#include <chrono>
#include <functional>
#include <memory>
#include <string>
#include <thread>

#include "rclcpp/rclcpp.hpp"
#include "std_msgs/msg/string.hpp"

#include "/home/srliu/myProject/mySpace/src/profile_liu/myProfile.hpp"

using namespace std::chrono_literals;

//#define RCLCPP_INFO_LIU               RCLCPP_INFO
#define RCLCPP_INFO_LIU(logger, ...)    {}  
/*
 * A small convenience function for converting a thread ID to a string
 */
std::string string_thread_id() {
    auto hashed = std::hash<std::thread::id>()(std::this_thread::get_id());
    return std::to_string(hashed);
}


/* MARK: Node0
 * For this example, we will be creating a publishing node like the one in minimal_publisher.
 * We will have a single subscriber node running 2 threads. Each thread loops at different speeds, and
 * just repeats what it sees from the publisher to the screen.
 */
class PublisherNode : public rclcpp::Node 
{
public:
    PublisherNode()
    : Node("PublisherNode", rclcpp::NodeOptions().use_intra_process_comms(true)), count_(0) {
    publisher_ = this->create_publisher<std_msgs::msg::String>("srliu_test", 10);
    auto timer_callback =
    [this]() -> void {
        auto message = std_msgs::msg::String();
        message.data = "Hello World! " + std::to_string(this->count_++);
        // Extract current thread
        auto curr_thread = string_thread_id();
        // Prep display message
        RCLCPP_INFO_LIU(
            this->get_logger(), "\n<<THREAD %s>> Publishing '%s'",
            curr_thread.c_str(), message.data.c_str());
            this->publisher_->publish(message);
        };
    timer_ = this->create_wall_timer(2ms, timer_callback);
    }

private:
    rclcpp::TimerBase::SharedPtr timer_;
    rclcpp::Publisher<std_msgs::msg::String>::SharedPtr publisher_;
    size_t count_;
};


// MARK: node
struct Consumer : public rclcpp::Node
{
public:
    Consumer(const std::string & name)
    : Node(name, rclcpp::NodeOptions().use_intra_process_comms(true))
    {
        callback_group_subscriber1_ = this->create_callback_group(
        rclcpp::CallbackGroupType::MutuallyExclusive);
        auto sub1_opt = rclcpp::SubscriptionOptions();
        sub1_opt.callback_group = callback_group_subscriber1_;
        sub_ = this->create_subscription<std_msgs::msg::String>(
        "srliu_test",
        rclcpp::QoS(10),
        std::bind(
            &Consumer::subscriber_cb,
            this,
            std::placeholders::_1), 
            sub1_opt
        );
    }

private:
    std::string timing_string() {
        rclcpp::Time time = this->now();
        return std::to_string(time.nanoseconds());
    }

    void subscriber_cb(const std_msgs::msg::String::UniquePtr msg) {
    auto message_received_at = timing_string();
    // Extract current thread
    RCLCPP_INFO_LIU(
        this->get_logger(), "THREAD %s => Heard '%s' at %s",
        string_thread_id().c_str(), msg->data.c_str(), message_received_at.c_str());
    }

    rclcpp::CallbackGroup::SharedPtr callback_group_subscriber1_;
    rclcpp::Subscription<std_msgs::msg::String>::SharedPtr sub_;
};



int main(int argc, char * argv[])
{
    rclcpp::init(argc, argv);

    // You MUST use the MultiThreadedExecutor to use, well, multiple threads
    rclcpp::executors::SingleThreadedExecutor executor;
    //rclcpp::executors::MultiThreadedExecutor executor(rclcpp::ExecutorOptions(), 80, true);
    auto pubnode = std::make_shared<PublisherNode>();
    
    /*auto consumer0  = std::make_shared<Consumer>("consumer0");
    auto consumer1  = std::make_shared<Consumer>("consumer1");
    auto consumer2  = std::make_shared<Consumer>("consumer2");
    auto consumer3  = std::make_shared<Consumer>("consumer3");
    auto consumer4  = std::make_shared<Consumer>("consumer4");
    auto consumer5  = std::make_shared<Consumer>("consumer5");
    auto consumer6  = std::make_shared<Consumer>("consumer6");
    auto consumer7  = std::make_shared<Consumer>("consumer7");
    auto consumer8  = std::make_shared<Consumer>("consumer8");
    auto consumer9  = std::make_shared<Consumer>("consumer9");

    auto consumer10 = std::make_shared<Consumer>("consumer10");
    auto consumer11 = std::make_shared<Consumer>("consumer11");
    auto consumer12 = std::make_shared<Consumer>("consumer12");
    auto consumer13 = std::make_shared<Consumer>("consumer13"); 
    auto consumer14 = std::make_shared<Consumer>("consumer14");
    auto consumer15 = std::make_shared<Consumer>("consumer15");
    auto consumer16 = std::make_shared<Consumer>("consumer16");
    auto consumer17 = std::make_shared<Consumer>("consumer17");
    auto consumer18 = std::make_shared<Consumer>("consumer18");
    auto consumer19 = std::make_shared<Consumer>("consumer19");*/

    /*auto consumer20 = std::make_shared<Consumer>("consumer20");
    auto consumer21 = std::make_shared<Consumer>("consumer21");
    auto consumer22 = std::make_shared<Consumer>("consumer22");
    auto consumer23 = std::make_shared<Consumer>("consumer23"); 
    auto consumer24 = std::make_shared<Consumer>("consumer24");
    auto consumer25 = std::make_shared<Consumer>("consumer25");
    auto consumer26 = std::make_shared<Consumer>("consumer26");
    auto consumer27 = std::make_shared<Consumer>("consumer27");
    auto consumer28 = std::make_shared<Consumer>("consumer28");
    auto consumer29 = std::make_shared<Consumer>("consumer29");

    auto consumer30 = std::make_shared<Consumer>("consumer30");
    auto consumer31 = std::make_shared<Consumer>("consumer31");
    auto consumer32 = std::make_shared<Consumer>("consumer32");
    auto consumer33 = std::make_shared<Consumer>("consumer33"); 
    auto consumer34 = std::make_shared<Consumer>("consumer34");
    auto consumer35 = std::make_shared<Consumer>("consumer35");
    auto consumer36 = std::make_shared<Consumer>("consumer36");
    auto consumer37 = std::make_shared<Consumer>("consumer37");
    auto consumer38 = std::make_shared<Consumer>("consumer38");
    auto consumer39 = std::make_shared<Consumer>("consumer39");

    auto consumer40 = std::make_shared<Consumer>("consumer40");
    auto consumer41 = std::make_shared<Consumer>("consumer41");
    auto consumer42 = std::make_shared<Consumer>("consumer42");
    auto consumer43 = std::make_shared<Consumer>("consumer43"); 
    auto consumer44 = std::make_shared<Consumer>("consumer44");
    auto consumer45 = std::make_shared<Consumer>("consumer45");
    auto consumer46 = std::make_shared<Consumer>("consumer46");
    auto consumer47 = std::make_shared<Consumer>("consumer47");
    auto consumer48 = std::make_shared<Consumer>("consumer48");
    auto consumer49 = std::make_shared<Consumer>("consumer49");*/



    executor.add_node(pubnode);

    /*executor.add_node(consumer0);
    executor.add_node(consumer1);
    executor.add_node(consumer2);
    executor.add_node(consumer3);
    executor.add_node(consumer4);
    executor.add_node(consumer5);
    executor.add_node(consumer6);
    executor.add_node(consumer7);
    executor.add_node(consumer8);
    executor.add_node(consumer9);

    executor.add_node(consumer10);
    executor.add_node(consumer11);
    executor.add_node(consumer12);
    executor.add_node(consumer13);
    executor.add_node(consumer14);
    executor.add_node(consumer15);
    executor.add_node(consumer16);
    executor.add_node(consumer17);
    executor.add_node(consumer18);
    executor.add_node(consumer19);*/

    /*executor.add_node(consumer20);
    executor.add_node(consumer21);
    executor.add_node(consumer22);
    executor.add_node(consumer23);
    executor.add_node(consumer24);
    executor.add_node(consumer25);
    executor.add_node(consumer26);
    executor.add_node(consumer27);
    executor.add_node(consumer28);
    executor.add_node(consumer29);

    executor.add_node(consumer30);
    executor.add_node(consumer31);
    executor.add_node(consumer32);
    executor.add_node(consumer33);
    executor.add_node(consumer34);
    executor.add_node(consumer35);
    executor.add_node(consumer36);
    executor.add_node(consumer37);
    executor.add_node(consumer38);
    executor.add_node(consumer39);

    executor.add_node(consumer40);
    executor.add_node(consumer41);
    executor.add_node(consumer42);
    executor.add_node(consumer43);
    executor.add_node(consumer44);
    executor.add_node(consumer45);
    executor.add_node(consumer46);
    executor.add_node(consumer47);
    executor.add_node(consumer48);
    executor.add_node(consumer49);*/
    //executor.add_node(subnode);

    executor.spin();
    rclcpp::shutdown();

    return 0;
}